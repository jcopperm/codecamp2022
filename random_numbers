{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"random_numbers","provenance":[{"file_id":"1nuATb3MWWCxNVO38V5ArjrMj4P5yTn1j","timestamp":1658162551675}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["This notebook will teach you about random numbers and statistics while it reviews and reinforces basic python and numpy concepts and usage."],"metadata":{"id":"oqQcUNuVrL34"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"5QMIeFddCTav"},"outputs":[],"source":["# First, bring in the libraries of built-in functions we'll need\n","import numpy as np  # numpy (numerical python) - very useful for all things math\n","import matplotlib.pyplot as plt  # plotting tools"]},{"cell_type":"code","source":["# Numpy and python review\n","# range function and for loops\n","print('Range function is very useful for loops')\n","for i in range(7):\n","  print(i)\n","\n","# numpy arrays\n","print('\\nNumpy arrays will be used many times in this lesson')\n","arr = np.array([5,4,3,2,1,5,4,3,2,1])\n","print(arr, 'example array')\n","print(len(arr), '= length of array')\n","\n","# simple plots\n","plt.plot(arr, '.', markersize=5)  # plots array with dots of size 5\n","plt.title('Sample plot')\n","plt.xlabel('index of array')\n","plt.ylabel('value of array element')\n","plt.show()  # show it now in output of cell"],"metadata":{"id":"YaXQdmDJOTWO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Random numbers in numpy - use 'random' library (np.random)\n","count = 15\n","array_rand = np.random.rand(count)\n","print('Here is an array of random numbers:\\n', array_rand)\n","\n","print(\"It's helpful to plot the array to see what's in it\")\n","plt.plot(array_rand, '.', markersize=5)\n","plt.title('Array of random numbers')\n","plt.xlabel('index of array')\n","plt.ylabel('Value of array element (random number)')\n","plt.show()\n","\n","# random integers\n","int_array_rand = np.random.randint(1, 6, size=count)\n","print('\\nHere is an array of random INTEGERS:\\n', int_array_rand)\n","print('We can plot this array')\n","plt.plot(int_array_rand, '.', markersize=5)\n","plt.title('Array of random integers')\n","plt.xlabel('index of array')\n","plt.ylabel('Value of array element (random integer)')\n","plt.show()\n","print('Why are there no SIXES??')"],"metadata":{"id":"16ykKi-VSA7B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# more random integers and histograms\n","count = 100\n","int_array_rand = np.random.randint(1, 7, size=count) # now includes 6\n","print(int_array_rand)\n","plt.plot(int_array_rand, '.', markersize=5)\n","plt.show()\n","\n","# histogram\n","print(\"\\nA histogram quickly shows the number of items in each 'bin'\")\n","plt.hist(int_array_rand, bins = 6)\n","plt.show()\n","\n","# nicer histogram with common-sense bins\n","print('We can make a slightly nicer histogram')\n","print('Numpy array for common-sense bin boundaries')\n","print(np.arange(0.5,7,1))\n","plt.hist(int_array_rand, bins = np.arange(0.5,7,1)) # with new bin boundaries\n","plt.title('Histogram of single die rolls')\n","plt.xlabel('Roll')\n","plt.ylabel('Count (number of rolls)')\n","plt.show()\n"],"metadata":{"id":"WJX4eAwuof6E"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# more dice\n","# BTW singular of 'dice' is 'die'\n","\n","# first, make some helpful functions\n","\n","def roll_one(repeats):  # how many rolls of a single die\n","  return np.random.randint(1, 7, size=repeats)\n","\n","def histogram_one_die(n):  # n is same as repeats; ok to use diff name\n","  hist_plot = plt.hist(roll_one(n), bins = np.arange(0.5,7,1))\n","  plt.title(\"Histogram of Single-Die Rolls\")\n","  plt.xlabel('Roll')\n","  plt.ylabel('Count')\n","  plt.show()\n","\n","print(roll_one(20))\n","histogram_one_die(3000)\n","\n","# two dice\n","# test array addition in numpy\n","first_rolls = roll_one(10)\n","second_rolls = roll_one(10)\n","print(first_rolls)\n","print(second_rolls)\n","print(first_rolls + second_rolls)\n","\n","def roll_two(repeats):  # how many rolls of a single die\n","  return roll_one(repeats) + roll_one(repeats)\n","\n","def histogram_two_dice(n):\n","  hist_plot = plt.hist(roll_two(n), bins = np.arange(1.5,13,1))\n","  plt.title(\"Histogram of Two-Dice Rolls\")\n","  plt.xlabel('Roll')\n","  plt.ylabel('Count')\n","  plt.show()\n","\n","histogram_two_dice(100000)\n","\n","# three dice\n","def roll_three(repeats):  # how many rolls of a single die\n","  return roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats)\n","\n","def histogram_three_dice(n):\n","  hist_plot = plt.hist(roll_three(n), bins = np.arange(2.5,19,1))\n","  plt.title(\"Histogram of Three-Dice Rolls\")\n","  plt.xlabel('Roll')\n","  plt.ylabel('Count')\n","  plt.show()\n","\n","histogram_three_dice(100000)\n","\n","# five dice\n","def roll_five(repeats):  # how many rolls of a single die\n","  return roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats)\n","\n","def histogram_five_dice(n):\n","  hist_plot = plt.hist(roll_five(n), bins = np.arange(4.5,31,1))\n","  plt.title(\"Histogram of Five-Dice Rolls\")\n","  plt.xlabel('Roll')\n","  plt.ylabel('Count')\n","  plt.show()\n","\n","histogram_five_dice(100000)\n","\n","\n","# ten dice\n","def roll_ten(repeats):  # how many rolls of a single die\n","  return roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats) \\\n","  + roll_one(repeats)\n","\n","def histogram_ten_dice(n):\n","  hist_plot = plt.hist(roll_ten(n), bins = np.arange(9.5,61,1))\n","  plt.title(\"Histogram of Ten-Dice Rolls\")\n","  plt.xlabel('Roll')\n","  plt.ylabel('Count')\n","  plt.show()\n","\n","histogram_ten_dice(100000)\n"],"metadata":{"id":"4Q_fvpCrfI8L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# histogram function - for any number of random dice rolls\n","\n","def roll_any(rolls,repeats):  # any numbers of rolls and repeats\n","  tmp_rolls = np.zeros(repeats)\n","  for i in range(rolls):\n","    tmp_rolls = tmp_rolls + roll_one(repeats)\n","  return tmp_rolls\n","\n","def histogram_dice(rolls,repeats):\n","  min = rolls-0.5 # minimum of histogram\n","  max = rolls*6+1 # maximum of histogram\n","  hist_plot = plt.hist(roll_any(rolls,repeats), bins = np.arange(min,max,1))\n","  title_string = \"Histogram of \" + str(rolls) + \"-Dice Rolls  (\" \\\n","  + str(repeats) + \" repeats)\"  # title that automatically includes parameters\n","  plt.title(title_string)\n","  plt.xlabel('Roll')\n","  plt.ylabel('Count')\n","  plt.show()\n","\n","histogram_dice(20,10000)"],"metadata":{"id":"1uY03Rk4c4qN"},"execution_count":null,"outputs":[]}]}